// Generated by BUCKLESCRIPT VERSION 4.0.8, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Yaml = require("yaml");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");

function parse(str) {
  var json;
  try {
    json = Yaml.parse(str);
  }
  catch (exn){
    json = null;
  }
  var p = function (json) {
    var match = Js_json.classify(json);
    if (typeof match === "number") {
      switch (match) {
        case 0 : 
            return /* Bool */Block.__(0, [false]);
        case 1 : 
            return /* Bool */Block.__(0, [true]);
        case 2 : 
            return /* Null */0;
        
      }
    } else {
      switch (match.tag | 0) {
        case 0 : 
            return /* String */Block.__(2, [match[0]]);
        case 1 : 
            return /* Float */Block.__(1, [match[0]]);
        case 2 : 
            return /* Object */Block.__(4, [$$Array.to_list($$Array.map((function (param) {
                                  return /* tuple */[
                                          param[0],
                                          p(param[1])
                                        ];
                                }), Js_dict.entries(match[0])))]);
        case 3 : 
            return /* Array */Block.__(3, [$$Array.to_list($$Array.map(p, match[0]))]);
        
      }
    }
  };
  return p(json);
}

function stringify(yaml) {
  var s = function (yaml) {
    if (typeof yaml === "number") {
      return null;
    } else {
      switch (yaml.tag | 0) {
        case 3 : 
            return $$Array.of_list(List.map(s, yaml[0]));
        case 4 : 
            return Js_dict.fromList(List.map((function (param) {
                              return /* tuple */[
                                      param[0],
                                      s(param[1])
                                    ];
                            }), yaml[0]));
        default:
          return yaml[0];
      }
    }
  };
  var json = s(yaml);
  var match = Js_json.classify(json);
  if (typeof match === "number" && match >= 2) {
    return "";
  } else {
    return Yaml.stringify(json);
  }
}

exports.parse = parse;
exports.stringify = stringify;
/* yaml Not a pure module */
